"""seed: add provenance cols + seed idempotency indexes (global + per-org)

Revision ID: ce28d9cfd6bd
Revises: 7ab9704b9caf
Create Date: 2025-10-28 09:30:12.124035

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'ce28d9cfd6bd'
down_revision = '7ab9704b9caf'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('billing_event_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('stripe_event_id', sa.String(length=255), nullable=False),
    sa.Column('type', sa.String(length=80), nullable=False),
    sa.Column('signature_valid', sa.Boolean(), server_default=sa.text('true'), nullable=False),
    sa.Column('payload', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False),
    sa.Column('retries', sa.Integer(), server_default=sa.text('0'), nullable=False),
    sa.Column('notes', sa.String(length=255), nullable=True),
    sa.Column('processed_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('billing_event_logs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_billing_event_logs_stripe_event_id'), ['stripe_event_id'], unique=True)
        batch_op.create_index(batch_op.f('ix_billing_event_logs_type'), ['type'], unique=False)

    op.create_table('orgs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('is_active', sa.Boolean(), server_default=sa.text('true'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('app_settings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False),
    sa.Column('settings_version', sa.Integer(), server_default=sa.text('1'), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('org_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['org_id'], ['orgs.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('app_settings', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_app_settings_org_id'), ['org_id'], unique=False)

    op.create_table('assemblies',
    sa.Column('org_id', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('assembly_code', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), server_default=sa.text('true'), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('category', sa.Text(), nullable=True),
    sa.Column('subcategory', sa.Text(), nullable=True),
    sa.Column('is_featured', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.ForeignKeyConstraint(['org_id'], ['orgs.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('assemblies', schema=None) as batch_op:
        batch_op.create_index('ix_assemblies_category_active', [sa.literal_column('lower(category)')], unique=False, postgresql_where=sa.text('(is_active = true)'))
        batch_op.create_index('ix_assemblies_category_subcategory_active', [sa.literal_column('lower(category)'), sa.literal_column('lower(subcategory)')], unique=False, postgresql_where=sa.text('(is_active = true)'))
        batch_op.create_index(batch_op.f('ix_assemblies_org_id'), ['org_id'], unique=False)
        batch_op.create_index('ix_assemblies_subcategory_active', [sa.literal_column('lower(subcategory)')], unique=False, postgresql_where=sa.text('(is_active = true)'))
        batch_op.create_index('uq_assemblies_lower_name_active_idx', [sa.literal_column('lower(name)')], unique=True, postgresql_where=sa.text('(is_active = true)'))

    op.create_table('billing_customers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('org_id', sa.Integer(), nullable=False),
    sa.Column('stripe_customer_id', sa.String(length=64), nullable=False),
    sa.Column('billing_email', sa.String(length=255), nullable=True),
    sa.Column('default_payment_method', sa.String(length=64), nullable=True),
    sa.Column('billing_address_json', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False),
    sa.Column('tax_ids_json', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['org_id'], ['orgs.id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('billing_customers', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_billing_customers_org_id'), ['org_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_billing_customers_stripe_customer_id'), ['stripe_customer_id'], unique=True)

    op.create_table('dje_items',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('org_id', sa.Integer(), nullable=True),
    sa.Column('category', sa.String(), nullable=False),
    sa.Column('subcategory', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=False),
    sa.Column('default_unit_cost', sa.Numeric(precision=12, scale=4), server_default=sa.text('0'), nullable=False),
    sa.Column('cost_code', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), server_default=sa.text('TRUE'), nullable=False),
    sa.Column('is_seed', sa.Boolean(), server_default=sa.text('FALSE'), nullable=False),
    sa.Column('seed_pack', sa.String(), nullable=True),
    sa.Column('seed_version', sa.Integer(), nullable=True),
    sa.Column('seed_key', sa.String(), nullable=True),
    sa.Column('seeded_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('vendor', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['org_id'], ['orgs.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('dje_items', schema=None) as batch_op:
        batch_op.create_index('ix_dje_items_cat_sub_desc', ['category', 'subcategory', 'description'], unique=False)
        batch_op.create_index('ix_dje_items_category', ['category'], unique=False)
        batch_op.create_index('ix_dje_items_lower_description', [sa.literal_column('lower(description)')], unique=False)
        batch_op.create_index('ix_dje_items_lower_description_pattern', [sa.literal_column('lower(description)')], unique=False)
        batch_op.create_index(batch_op.f('ix_dje_items_org_id'), ['org_id'], unique=False)
        batch_op.create_index('ux_dje_items_cat_desc_vendor_active_true', ['category', 'description', 'vendor'], unique=True, postgresql_where=sa.text('(is_active = true)'))
        batch_op.create_index('ux_dje_items_org_seed_key_seeded_true', ['org_id', 'seed_key'], unique=True, postgresql_where=sa.text('(is_seed = true) AND (org_id IS NOT NULL)'))
        batch_op.create_index('ux_dje_items_seed_key_global_true', ['seed_key'], unique=True, postgresql_where=sa.text('(is_seed = true) AND (org_id IS NULL)'))

    op.create_table('materials',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('org_id', sa.Integer(), nullable=True),
    sa.Column('material_type', sa.String(), nullable=True),
    sa.Column('sku', sa.String(), nullable=True),
    sa.Column('manufacturer', sa.String(), nullable=True),
    sa.Column('item_description', sa.String(), nullable=True),
    sa.Column('vendor', sa.String(), nullable=True),
    sa.Column('price', sa.Numeric(precision=10, scale=4), nullable=True),
    sa.Column('labor_unit', sa.Numeric(precision=10, scale=4), nullable=True),
    sa.Column('unit_quantity_size', sa.Integer(), nullable=False),
    sa.Column('material_cost_code', sa.Text(), nullable=True),
    sa.Column('mat_cost_code_desc', sa.Text(), nullable=True),
    sa.Column('labor_cost_code', sa.Text(), nullable=True),
    sa.Column('labor_cost_code_desc', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), server_default=sa.text('TRUE'), nullable=False),
    sa.Column('is_seed', sa.Boolean(), server_default=sa.text('FALSE'), nullable=False),
    sa.Column('seed_pack', sa.String(), nullable=True),
    sa.Column('seed_version', sa.Integer(), nullable=True),
    sa.Column('seed_key', sa.String(), nullable=True),
    sa.Column('seeded_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['org_id'], ['orgs.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('materials', schema=None) as batch_op:
        batch_op.create_index('ix_materials_lower_item_description', [sa.literal_column('lower(item_description)')], unique=False)
        batch_op.create_index('ix_materials_lower_item_description_pattern', [sa.literal_column('lower(item_description)')], unique=False)
        batch_op.create_index('ix_materials_material_type', ['material_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_materials_org_id'), ['org_id'], unique=False)
        batch_op.create_index('ix_materials_type_active_desc', ['material_type', 'is_active', 'item_description'], unique=False)
        batch_op.create_index('ux_materials_org_seed_key_seeded_true', ['org_id', 'seed_key'], unique=True, postgresql_where=sa.text('(is_seed = true) AND (org_id IS NOT NULL)'))
        batch_op.create_index('ux_materials_seed_key_global_true', ['seed_key'], unique=True, postgresql_where=sa.text('(is_seed = true) AND (org_id IS NULL)'))
        batch_op.create_index('ux_materials_type_desc_active_true', ['material_type', 'item_description'], unique=True, postgresql_where=sa.text('(is_active = true)'))

    op.create_table('subscriptions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('org_id', sa.Integer(), nullable=False),
    sa.Column('stripe_subscription_id', sa.String(length=64), nullable=False),
    sa.Column('product_id', sa.String(length=64), nullable=False),
    sa.Column('price_id', sa.String(length=64), nullable=False),
    sa.Column('status', sa.String(length=32), server_default=sa.text("'incomplete'"), nullable=False),
    sa.Column('cancel_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('cancel_at_period_end', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.Column('current_period_end', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('quantity', sa.Integer(), server_default=sa.text('1'), nullable=False),
    sa.Column('entitlements_json', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['org_id'], ['orgs.id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('org_id', name='uq_subscriptions_org_id')
    )
    with op.batch_alter_table('subscriptions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_subscriptions_current_period_end'), ['current_period_end'], unique=False)
        batch_op.create_index(batch_op.f('ix_subscriptions_org_id'), ['org_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_subscriptions_price_id'), ['price_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_subscriptions_product_id'), ['product_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_subscriptions_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('ix_subscriptions_stripe_subscription_id'), ['stripe_subscription_id'], unique=True)

    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('org_id', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('email_verified_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['org_id'], ['orgs.id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_org_id'), ['org_id'], unique=False)

    op.create_table('assembly_components',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('assembly_id', sa.Integer(), nullable=False),
    sa.Column('material_id', sa.Integer(), nullable=False),
    sa.Column('qty_per_assembly', sa.Numeric(precision=12, scale=4), nullable=False),
    sa.Column('sort_order', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), server_default=sa.text('true'), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['assembly_id'], ['assemblies.id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['material_id'], ['materials.id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('assembly_components', schema=None) as batch_op:
        batch_op.create_index('ix_ac_assembly', ['assembly_id'], unique=False)
        batch_op.create_index('ix_ac_assembly_sort', ['assembly_id', 'sort_order'], unique=False)
        batch_op.create_index('ix_ac_material', ['material_id'], unique=False)
        batch_op.create_index('uq_ac_assembly_material_active_idx', ['assembly_id', 'material_id'], unique=True, postgresql_where=sa.text('(is_active = true)'))

    op.create_table('customers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('org_id', sa.Integer(), nullable=True),
    sa.Column('company_name', sa.String(), nullable=True),
    sa.Column('contact_name', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('phone', sa.String(), nullable=True),
    sa.Column('address1', sa.String(), nullable=True),
    sa.Column('address2', sa.String(), nullable=True),
    sa.Column('city', sa.String(), nullable=True),
    sa.Column('state', sa.String(length=2), nullable=True),
    sa.Column('zip', sa.String(length=10), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), server_default=sa.text('TRUE'), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['org_id'], ['orgs.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('customers', schema=None) as batch_op:
        batch_op.create_index('ix_customers_city_active', ['city', 'is_active'], unique=False)
        batch_op.create_index('ix_customers_company_name', ['company_name'], unique=False)
        batch_op.create_index('ix_customers_contact_name', ['contact_name'], unique=False)
        batch_op.create_index('ix_customers_created_at', ['created_at'], unique=False)
        batch_op.create_index('ix_customers_lower_email', [sa.literal_column('lower(email)')], unique=False)
        batch_op.create_index(batch_op.f('ix_customers_org_id'), ['org_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_customers_user_id'), ['user_id'], unique=False)

    op.create_table('email_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('to_email', sa.String(length=320), nullable=False),
    sa.Column('template', sa.String(length=64), nullable=False),
    sa.Column('subject', sa.String(length=200), nullable=False),
    sa.Column('provider_msg_id', sa.String(length=128), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('meta', sa.JSON(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('email_logs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_email_logs_provider_msg_id'), ['provider_msg_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_email_logs_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('ix_email_logs_to_email'), ['to_email'], unique=False)

    op.create_table('org_memberships',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('org_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('role', sa.String(length=20), server_default='member', nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("role IN ('owner','admin','member')", name='ck_org_memberships_role_valid'),
    sa.ForeignKeyConstraint(['org_id'], ['orgs.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('org_id', 'user_id', name='uq_org_memberships_org_user')
    )
    with op.batch_alter_table('org_memberships', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_org_memberships_org_id'), ['org_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_org_memberships_user_id'), ['user_id'], unique=False)

    op.create_table('estimates',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('customer_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('org_id', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('project_address', sa.String(length=255), nullable=True),
    sa.Column('project_ref', sa.String(length=255), nullable=True),
    sa.Column('status', sa.String(length=32), server_default=sa.text("'draft'"), nullable=False),
    sa.Column('settings_snapshot', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False),
    sa.Column('work_payload', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ),
    sa.ForeignKeyConstraint(['org_id'], ['orgs.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('estimates', schema=None) as batch_op:
        batch_op.create_index('ix_estimates_created_at', ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_estimates_customer_id'), ['customer_id'], unique=False)
        batch_op.create_index('ix_estimates_name', [sa.literal_column('lower(name)')], unique=False)
        batch_op.create_index(batch_op.f('ix_estimates_org_id'), ['org_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_estimates_user_id'), ['user_id'], unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('estimates', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_estimates_user_id'))
        batch_op.drop_index(batch_op.f('ix_estimates_org_id'))
        batch_op.drop_index('ix_estimates_name')
        batch_op.drop_index(batch_op.f('ix_estimates_customer_id'))
        batch_op.drop_index('ix_estimates_created_at')

    op.drop_table('estimates')
    with op.batch_alter_table('org_memberships', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_org_memberships_user_id'))
        batch_op.drop_index(batch_op.f('ix_org_memberships_org_id'))

    op.drop_table('org_memberships')
    with op.batch_alter_table('email_logs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_email_logs_to_email'))
        batch_op.drop_index(batch_op.f('ix_email_logs_status'))
        batch_op.drop_index(batch_op.f('ix_email_logs_provider_msg_id'))

    op.drop_table('email_logs')
    with op.batch_alter_table('customers', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_customers_user_id'))
        batch_op.drop_index(batch_op.f('ix_customers_org_id'))
        batch_op.drop_index('ix_customers_lower_email')
        batch_op.drop_index('ix_customers_created_at')
        batch_op.drop_index('ix_customers_contact_name')
        batch_op.drop_index('ix_customers_company_name')
        batch_op.drop_index('ix_customers_city_active')

    op.drop_table('customers')
    with op.batch_alter_table('assembly_components', schema=None) as batch_op:
        batch_op.drop_index('uq_ac_assembly_material_active_idx', postgresql_where=sa.text('(is_active = true)'))
        batch_op.drop_index('ix_ac_material')
        batch_op.drop_index('ix_ac_assembly_sort')
        batch_op.drop_index('ix_ac_assembly')

    op.drop_table('assembly_components')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_org_id'))

    op.drop_table('users')
    with op.batch_alter_table('subscriptions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_subscriptions_stripe_subscription_id'))
        batch_op.drop_index(batch_op.f('ix_subscriptions_status'))
        batch_op.drop_index(batch_op.f('ix_subscriptions_product_id'))
        batch_op.drop_index(batch_op.f('ix_subscriptions_price_id'))
        batch_op.drop_index(batch_op.f('ix_subscriptions_org_id'))
        batch_op.drop_index(batch_op.f('ix_subscriptions_current_period_end'))

    op.drop_table('subscriptions')
    with op.batch_alter_table('materials', schema=None) as batch_op:
        batch_op.drop_index('ux_materials_type_desc_active_true', postgresql_where=sa.text('(is_active = true)'))
        batch_op.drop_index('ux_materials_seed_key_global_true', postgresql_where=sa.text('(is_seed = true) AND (org_id IS NULL)'))
        batch_op.drop_index('ux_materials_org_seed_key_seeded_true', postgresql_where=sa.text('(is_seed = true) AND (org_id IS NOT NULL)'))
        batch_op.drop_index('ix_materials_type_active_desc')
        batch_op.drop_index(batch_op.f('ix_materials_org_id'))
        batch_op.drop_index('ix_materials_material_type')
        batch_op.drop_index('ix_materials_lower_item_description_pattern')
        batch_op.drop_index('ix_materials_lower_item_description')

    op.drop_table('materials')
    with op.batch_alter_table('dje_items', schema=None) as batch_op:
        batch_op.drop_index('ux_dje_items_seed_key_global_true', postgresql_where=sa.text('(is_seed = true) AND (org_id IS NULL)'))
        batch_op.drop_index('ux_dje_items_org_seed_key_seeded_true', postgresql_where=sa.text('(is_seed = true) AND (org_id IS NOT NULL)'))
        batch_op.drop_index('ux_dje_items_cat_desc_vendor_active_true', postgresql_where=sa.text('(is_active = true)'))
        batch_op.drop_index(batch_op.f('ix_dje_items_org_id'))
        batch_op.drop_index('ix_dje_items_lower_description_pattern')
        batch_op.drop_index('ix_dje_items_lower_description')
        batch_op.drop_index('ix_dje_items_category')
        batch_op.drop_index('ix_dje_items_cat_sub_desc')

    op.drop_table('dje_items')
    with op.batch_alter_table('billing_customers', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_billing_customers_stripe_customer_id'))
        batch_op.drop_index(batch_op.f('ix_billing_customers_org_id'))

    op.drop_table('billing_customers')
    with op.batch_alter_table('assemblies', schema=None) as batch_op:
        batch_op.drop_index('uq_assemblies_lower_name_active_idx', postgresql_where=sa.text('(is_active = true)'))
        batch_op.drop_index('ix_assemblies_subcategory_active', postgresql_where=sa.text('(is_active = true)'))
        batch_op.drop_index(batch_op.f('ix_assemblies_org_id'))
        batch_op.drop_index('ix_assemblies_category_subcategory_active', postgresql_where=sa.text('(is_active = true)'))
        batch_op.drop_index('ix_assemblies_category_active', postgresql_where=sa.text('(is_active = true)'))

    op.drop_table('assemblies')
    with op.batch_alter_table('app_settings', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_app_settings_org_id'))

    op.drop_table('app_settings')
    op.drop_table('orgs')
    with op.batch_alter_table('billing_event_logs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_billing_event_logs_type'))
        batch_op.drop_index(batch_op.f('ix_billing_event_logs_stripe_event_id'))

    op.drop_table('billing_event_logs')
    # ### end Alembic commands ###
